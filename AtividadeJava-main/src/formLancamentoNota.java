import java.util.ArrayList;
import java.util.List;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class formLancamentoNota extends javax.swing.JFrame {

    /**
     * Creates new form formLancamentoNota
     */
    public formLancamentoNota() {
        initComponents();
        configurarTabela();
        carregarFornecedores();
    }
    
    private void carregarFornecedores() {
        FornecedoresDAO dao = new FornecedoresDAO();
        List<Fornecedores> lista = dao.getTodosFornecedores(); 
        
        fornecedorComboBox.removeAllItems(); 
        for (Fornecedores f : lista) {
            fornecedorComboBox.addItem(f); 
        }
    }
    

    private void configurarTabela() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID Prod.");
        model.addColumn("Nome");
        model.addColumn("Qtd.");
        model.addColumn("Vlr. Unit.");
        model.addColumn("Subtotal");
        itensTable.setModel(model);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fornecedorComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        codBarrasTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantidadeTF = new javax.swing.JTextField();
        adicionarBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        valorTotalNotaLabel = new javax.swing.JLabel();
        finalizarNotaBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        itensTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Notas");

        jLabel2.setText("Fornecedor");

        jLabel3.setText("Código de Barras");

        jLabel4.setText("Quantidade");

        adicionarBtn.setText("Adicionar");
        adicionarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Produtos Adicionados");

        valorTotalNotaLabel.setText("Valor Total da Nota: R$ 0,00");

        finalizarNotaBtn.setText("Finalizar e Salvar Nota");
        finalizarNotaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizarNotaBtnActionPerformed(evt);
            }
        });

        itensTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(itensTable);

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(adicionarBtn)
                    .addComponent(codBarrasTF)
                    .addComponent(fornecedorComboBox, 0, 110, Short.MAX_VALUE)
                    .addComponent(quantidadeTF))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(valorTotalNotaLabel)
                            .addComponent(finalizarNotaBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fornecedorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(codBarrasTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(quantidadeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(adicionarBtn)
                                .addGap(0, 45, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(valorTotalNotaLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(finalizarNotaBtn)))
                        .addGap(240, 240, 240))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(194, 194, 194))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void adicionarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarBtnActionPerformed
        // TODO add your handling code here:
        if (codBarrasTF.getText().trim().isEmpty() || quantidadeTF.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha o código de barras e a quantidade.", "Atenção", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String codBarras = codBarrasTF.getText();
        int quantidade;
        try {
            quantidade = Integer.parseInt(quantidadeTF.getText());
            if (quantidade <= 0) {
                JOptionPane.showMessageDialog(this, "A quantidade deve ser maior que zero.", "Atenção", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "A quantidade deve ser um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ProdutosDAO pDAO = new ProdutosDAO();
        Produtos produto = pDAO.getProdutoPorCodigoBarras(codBarras);

        if (produto == null) {
            JOptionPane.showMessageDialog(this, "Produto com este código de barras não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) itensTable.getModel();
        BigDecimal subtotal = produto.getPrecoVenda().multiply(new BigDecimal(quantidade));
        
        model.addRow(new Object[]{
            produto.getIdProduto(),
            produto.getNome(),
            quantidade,
            produto.getPrecoVenda(),
            subtotal
        });
        
        limparCamposProduto();
        atualizarValorTotalNota();
    }//GEN-LAST:event_adicionarBtnActionPerformed

    private void finalizarNotaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizarNotaBtnActionPerformed

    if (itensTable.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "Adicione pelo menos um item à nota antes de finalizar.", "Atenção", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    Fornecedores fornecedor = (Fornecedores) fornecedorComboBox.getSelectedItem();
    BigDecimal valorTotal = new BigDecimal(valorTotalNotaLabel.getText().replace("R$ ", "").replace(",", "."));
    
    Notas nota = new Notas();
    nota.setIdFornecedor(fornecedor.getIdFornecedor());
    nota.setDataNota(LocalDateTime.now());
    nota.setValorTotal(valorTotal);
    nota.setTipoNota("ENTRADA");

    NotasDAO nDAO = new NotasDAO();
    int idNovaNota = nDAO.inserir(nota);
    
    if (idNovaNota == -1) {
        JOptionPane.showMessageDialog(this, "Ocorreu um erro ao salvar o cabeçalho da nota.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    nota.setIdNota(idNovaNota);
    
    NotaItemDAO niDAO = new NotaItemDAO();
    ProdutosDAO pDAO = new ProdutosDAO();
    DefaultTableModel model = (DefaultTableModel) itensTable.getModel();
    
    for (int i = 0; i < model.getRowCount(); i++) {
        int idProduto = (int) model.getValueAt(i, 0);
        int quantidade = (int) model.getValueAt(i, 2);
        BigDecimal valorUnitario = (BigDecimal) model.getValueAt(i, 3);
        
        NotaItem item = new NotaItem();
        item.setIdNota(idNovaNota);
        item.setIdProduto(idProduto);
        item.setQuantidade(quantidade);
        item.setValorUnitario(valorUnitario);
        
        niDAO.inserir(item);
        pDAO.atualizarEstoque(idProduto, quantidade);
    }
    
    JOptionPane.showMessageDialog(this, "Nota de entrada salva com sucesso! ID da Nota: " + idNovaNota);
    
    int confirmPdf = JOptionPane.showConfirmDialog(
        this, 
        "Deseja gerar o PDF da nota agora?", 
        "Gerar PDF", 
        JOptionPane.YES_NO_OPTION);

    if (confirmPdf == JOptionPane.YES_OPTION) {
        NotaItemDAO itemDAO_para_pdf = new NotaItemDAO();
        List<NotaItem> itensSalvos = itemDAO_para_pdf.getItensPorNota(idNovaNota);
        
        if (!itensSalvos.isEmpty()) {
            GeradorPdf.gerarPdfNota(nota, fornecedor, itensSalvos);
        } else {
            JOptionPane.showMessageDialog(this, "Não foi possível encontrar os itens para gerar o PDF.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    limparFormularioCompleto();
    }//GEN-LAST:event_finalizarNotaBtnActionPerformed

    private void atualizarValorTotalNota() {
        BigDecimal total = BigDecimal.ZERO;
        DefaultTableModel model = (DefaultTableModel) itensTable.getModel();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            BigDecimal subtotal = (BigDecimal) model.getValueAt(i, 4);
            total = total.add(subtotal);
        }
        
        valorTotalNotaLabel.setText("R$ " + String.format("%.2f", total));
    }
    
    private void limparCamposProduto() {
        codBarrasTF.setText("");
        quantidadeTF.setText("");
        codBarrasTF.requestFocus();
    }
    
    private void limparFormularioCompleto() {
        limparCamposProduto();
        DefaultTableModel model = (DefaultTableModel) itensTable.getModel();
        model.setRowCount(0);
        atualizarValorTotalNota();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formLancamentoNota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formLancamentoNota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formLancamentoNota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formLancamentoNota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formLancamentoNota().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarBtn;
    private javax.swing.JTextField codBarrasTF;
    private javax.swing.JButton finalizarNotaBtn;
    private javax.swing.JComboBox<Fornecedores> fornecedorComboBox;
    private javax.swing.JTable itensTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField quantidadeTF;
    private javax.swing.JLabel valorTotalNotaLabel;
    // End of variables declaration//GEN-END:variables
}
